name: modify database

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: database modification action
        options: 
        - 'refresh'
        - 'destroy'
        - 'initialise'
        - 'run-migrations'
      environment:
        type: choice
        description: deployment environment
        options: 
        - 'dev'
        - 'test'
        - 'uat'
        - 'prod'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  DEPLOY_ACT: ${{ github.event.inputs.action }}
  DEPLOY_ENV: ${{ github.event.inputs.environment }}
  DEPLOY_SRC_PREFIX: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET_PREFIX }}

jobs:
  validation:
    runs-on: ubuntu-latest

    steps:
      - name: validate job parameters
        run: |
          echo """ \
            Modifying backend database using parameters:
              (Database Action)        - $DEPLOY_ACT
              (Deployment Environment) - $DEPLOY_ENV
          """

  database:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: validation

    permissions:
      id-token: write
      contents: read

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.DEPLOY_ENV }}-database-modification
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: run database destroy against ${{ env.DEPLOY_ENV }}
        if: ${{ env.DEPLOY_ACT == 'destroy' || env.DEPLOY_ACT == 'refresh' }}
        run: |
          lambda_function_name="${DEPLOY_ENV}-${{ vars.PROJECT_NAME }}-pg-mutate-lambda"
          cat <<EOF > $GITHUB_WORKSPACE/payload.json
          {
            "type": "destroy",
            "authUser": "postgres",
            "targetDatabase": "${{ vars.PROJECT_NAME }}_db",
            "roles": [
              "${{ vars.PROJECT_NAME }}_rw",
              "${{ vars.PROJECT_NAME }}_app_rw"
            ]
          }
          EOF

          openssl base64 -out $GITHUB_WORKSPACE/encoded_payload.json -in $GITHUB_WORKSPACE/payload.json 
          response=$(aws lambda invoke --function-name $lambda_function_name --region $AWS_REGION --payload file://$GITHUB_WORKSPACE/encoded_payload.json response.txt 2>&1)
          status_code=$(cat response.txt | jq -r '.statusCode')
          status_code=${status_code:-"unset"}
          echo "Status Code is: $status_code"
          if [[ "$status_code" == "500" ]]; then
            echo "[ERROR] Destruction of database failed against ${DEPLOY_ENV^^} with error:"
            echo "${response}"
            exit 1
          else
            response_payload=$(cat response.txt)
            echo "Response Payload: $response_payload"
            echo "[INFO] Destruction of database successfully run against ${DEPLOY_ENV^^}"
          fi

      - name: run database initialisation against ${{ env.DEPLOY_ENV }}
        if: ${{ env.DEPLOY_ACT == 'initialise' || env.DEPLOY_ACT == 'refresh' }}
        run: |
          lambda_function_name="${DEPLOY_ENV}-${{ vars.PROJECT_NAME }}-pg-mutate-lambda"
          cat <<EOF > $GITHUB_WORKSPACE/payload.json
          {
              "type": "initialise",
              "authUser": "postgres",
              "databases": [{
                  "name": "${{ vars.PROJECT_NAME }}_db",
                  "schemas": [
                      "public"
                  ],
                  "extensions": []
              }],
              "roles": [{
                  "name": "${{ vars.PROJECT_NAME }}_rw",
                  "kind": "rw",
                  "users": [{
                      "name": "${{ vars.PROJECT_NAME }}_app_rw",
                      "authType": "scram",
                      "credentialsArn": "${DEPLOY_ENV}/${{ vars.PROJECT_NAME }}/rds/user/${{ vars.PROJECT_NAME }}_app_rw"
                  }]
              }]
          }
          EOF

          openssl base64 -out $GITHUB_WORKSPACE/encoded_payload.json -in $GITHUB_WORKSPACE/payload.json 
          response=$(aws lambda invoke --function-name $lambda_function_name --region $AWS_REGION --payload file://$GITHUB_WORKSPACE/encoded_payload.json response.txt 2>&1)
          status_code=$(cat response.txt | jq -r '.statusCode')
          status_code=${status_code:-"unset"}
          echo "Status Code is: $status_code"
          if [[ "$status_code" == "500" ]]; then
            echo "[ERROR] Initialisation of database failed against ${DEPLOY_ENV^^} with error:"
            echo "${response}"
            exit 1
          else
            response_payload=$(cat response.txt)
            echo "Response Payload: $response_payload"
            echo "[INFO] Initialisation of database successfully run against ${DEPLOY_ENV^^}"
          fi

      - name: run database migrations against ${{ env.DEPLOY_ENV }}
        if: ${{ env.DEPLOY_ACT == 'run-migrations' || env.DEPLOY_ACT == 'refresh' }}
        env:
          DEPLOY_SRC: ${{ env.DEPLOY_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
        run: |
          lambda_function_name="${DEPLOY_ENV}-${{ vars.PROJECT_NAME }}-pg-mutate-lambda"
          cat <<EOF > $GITHUB_WORKSPACE/payload.json
          {
            "type": "run_migrations",
            "authUser": "${{ vars.PROJECT_NAME }}_app_rw",
            "targetDatabase": "${{ vars.PROJECT_NAME }}_db",
            "databaseMigrations": {
              "bucketName": "${DEPLOY_SRC}",
              "bucketPrefix": "releases",
              "releaseVersion": "latest"
            }
          }
          EOF

          openssl base64 -out $GITHUB_WORKSPACE/encoded_payload.json -in $GITHUB_WORKSPACE/payload.json 
          response=$(aws lambda invoke --function-name $lambda_function_name --region $AWS_REGION --payload file://$GITHUB_WORKSPACE/encoded_payload.json response.txt 2>&1)
          status_code=$(cat response.txt | jq -r '.statusCode')
          status_code=${status_code:-"unset"}
          echo "Status Code is: $status_code"
          if [[ "$status_code" == "500" ]]; then
            echo "[ERROR] Execution of latest database migrations failed against ${DEPLOY_ENV^^} with error:"
            echo "${response}"
            exit 1
          else
            response_payload=$(cat response.txt)
            echo "Response Payload: $response_payload"
            echo "[INFO] Execution of latest database migrations successfully run against ${DEPLOY_ENV^^}"
          fi