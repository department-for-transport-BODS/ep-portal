name: build and release application

on:
  workflow_dispatch:
    branches:
    - main
    inputs:
      change:
        type: choice
        description: type of change - one of ['patch', 'minor', 'major']
        required: true
        default: 'patch'
        options: 
        - patch
        - minor
        - major
  push:
    branches:
    - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_TYP: ${{ github.event.inputs.change }}
  RC_DST: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET }}

jobs:
  validation:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.increment.outputs.version }}

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: validate job parameters
        run: |
          echo """ \
            Executing build and release job using parameters:
              (Release Type) - $RC_TYP
          """

      - name: increment the ${{ env.RC_TYP }} version
        id: increment
        run: |
          # install yq for parsing yaml files
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && \
            sudo chmod 755 /usr/bin/yq

          npm install semver
          current_version=$(yq e '.version' VERSION)
          new_version=$(node -p "const semver = require('semver'); semver.inc('$current_version', '$RC_TYP', false)")
          yq e -i '.version = "'"$new_version"'"' VERSION
          echo "[INFO] Updated application version to ${new_version}"
          echo "version=${new_version}" >> "$GITHUB_OUTPUT"

          rm -rf ./node_modules/ package*

      - name: cache repo
        id: repo
        uses: actions/cache@v3
        with:
          path: ./
          key: repo-build-${{ github.sha }}

  backend:
    runs-on: ubuntu-latest
    needs: validation
    defaults:
      run:
        working-directory: backend

    permissions:
      id-token: write
      contents: read

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v3

      - name: setup sam
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
          role-session-name: backend-app-build
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: package and push backend code
        env: 
          VERSION: ${{ needs.validation.outputs.version }}
        run: |
          rc_path="releases/$VERSION/backend"
          
          sam package \
            --s3-bucket $RC_DST \
            --s3-prefix $rc_path \
            --output-template-file packaged.yml

          aws s3 cp packaged.yml s3://$RC_DST/$rc_path/
          aws s3 cp samconfig.yml s3://$RC_DST/$rc_path/
          
          echo "[INFO] Application component (BACKEND) with version ${VERSION} successfully uploaded"

  frontend:
    runs-on: ubuntu-latest
    needs: validation
    defaults:
      run:
        working-directory: frontend

    permissions:
      id-token: write
      contents: read

    strategy:
      matrix:
        environment: [dev, test, uat, prod]

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: frontend/.nvmrc

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ matrix.environment }}-app-build
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: package and push frontend code
        env:
          CI: ""
          ENV: ${{ matrix.environment }}
          VERSION: ${{ needs.validation.outputs.version }}
        run: |
          rc_path="releases/$VERSION/frontend/$ENV"

          npm install
          REACT_APP_ENV=$ENV npm run build

          echo "[INFO] Uploading application component (FRONTEND) for ${ENV^^}"
          aws s3 cp --recursive build/ s3://$RC_DST/$rc_path/
          echo "[INFO] Application component (FRONTEND) with version ${VERSION} successfully uploaded for ${ENV^^}"

  commit-and-clean:
    if: ${{ always() && ! contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    needs:
      - validation
      - backend
      - frontend

    permissions:
      actions: write

    steps:
      - name: retrieve cached repo
        id: repo
        uses: actions/cache@v3
        with:
          path: ./
          key: repo-build-${{ github.sha }}

      - name: commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'VERSION'
          committer_name: GitHub Actions
          committer_email: actions@github.com
          default_author: github_actions
          message: '[AUTO] GitHub actions push for version ${{ needs.validation.outputs.version }}'
          tag: '${{ needs.validation.outputs.version }} --force'
          tag_push: '--force'

      - name: clear cache(s)
        uses: actions/github-script@v6
        with:
          script: |
            console.log("about to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if ((cache.key).includes("build-${{ github.sha }}")) {
                console.log(cache)
                github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
              }
            }
            console.log("clear completed")

  trigger-deploy-dev:
    if: ${{ always() && ! contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    needs: 
      - validation
      - backend
      - frontend
      - commit-and-clean
    steps:
      - name: trigger remote
        uses: peter-evans/repository-dispatch@v3
        with:
          repository: ${{ github.repository }}
          event-type: automated-deploy-dev
          client-payload: '{ "environment": "dev", "releaseVersion": "${{ needs.validation.outputs.version }}" }'