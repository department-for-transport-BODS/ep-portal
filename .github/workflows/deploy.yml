name: deploy application

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      release_version:
        type: string
        description: version to be deployed
        required: true
        default: 'latest'
      environment:
        type: choice
        description: deployment environment
        options: 
        - 'dev'
        - 'test'
        - 'uat'
        - 'prod'
  repository_dispatch:
    branch: main
    types: [automated-deploy-dev]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  RC_SRC_PREFIX: ${{ vars.DEPLOYMENT_ARTEFACTS_S3_BUCKET_PREFIX }}
  RC_VER: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version ||
    github.event_name == 'repository_dispatch' && github.event.client_payload.release_version }}
  RC_ENV: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
    github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}

permissions:
  id-token: write

jobs:
  validation:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
      github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}

    env:
      RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-app-deployment-validation
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: validate job parameters
        run: |
          get_latest_version() {
            local bucket_name=$1
            local prefix_path=$2

            directories=$(aws s3 ls s3://$bucket_name/$prefix_path/ --summarize --human-readable | grep -E 'PRE|DIR' | awk '{print $2}')
            latest_version=""
            while IFS= read -r dir; do
              version=$(basename "$dir")
              if [[ $version =~ ^[0-9]+(\.[0-9]+){2}$ ]]; then
                if [[ -z $latest_version ]] || (( $(echo "$version" | awk -F '.' '{print $1*10000+$2*100+$3}') > $(echo "$latest_version" | awk -F '.' '{print $1*10000+$2*100+$3}') )); then
                  latest_version=$version
                fi
              fi
            done <<< "$directories"
            echo "$latest_version"
          }

          if [[ $RC_VER == "latest" ]]; then 
            latest_version=$(get_latest_version $RC_SRC 'releases')
            echo """ \
              Executing deploy job using parameters:
                (Release Version)    - $latest_version (latest)
                (Target Environment) - $RC_ENV
            """
            echo "RC_VER=${latest_version}" >> "$GITHUB_ENV"
          else
            echo """ \
              Executing deploy job using parameters:
                (Release Version)    - $RC_VER
                (Target Environment) - $RC_ENV
            """
          fi

      - name: validate release candidate version
        run: |
          [[ $RC_VER =~ ^[0-9]+(\.[0-9]+){2}$ ]] && rc_path="$RC_SRC/releases/$RC_VER" || rc_path="$RC_SRC/releases-dev/$RC_VER"

          rc_backend_path="$rc_path/backend"
          rc_frontend_path="$rc_path/frontend/$RC_ENV"
          rc_database_path="$rc_path/sql"

          if [[ `aws s3 ls s3://$rc_backend_path|head` ]]; then
            if [[ `aws s3 ls s3://$rc_frontend_path|head` ]]; then
              if [[ `aws s3 ls s3://$rc_database_path|head` ]]; then
                echo "[INFO] Release candidate version [${RC_VER}] successfully validated"
              else
                echo "[ERROR] Release candidate version [${RC_VER}] does not exist for component (DATABASE). Exiting"
                exit 1
            else
              echo "[ERROR] Release candidate version [${RC_VER}] does not exist for component (FRONTEND). Exiting"
              exit 1
            fi
          else
            echo "[ERROR] Release candidate version [${RC_VER}] does not exist for component (BACKEND). Exiting"
            exit 1
          fi

  database:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
      github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}
    needs: validation

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-database-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: deploy database migrations for ${{ env.RC_ENV }}
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
        run: |
          [[ $RC_VER =~ ^[0-9]+(\.[0-9]+){2}$ ]] && rc_path="releases" || rc_path="releases-dev"
          lambda_function_name="${RC_ENV}-epp-pg-mutate-lambda"
          read -r -d '' payload << EOF
          {
            "type": "run_migrations",
            "userCredentialsArn": "${RC_ENV}/epp/rds/user/epp_app_rw",
            "targetDatabase": "epp",
            "databaseMigrations": {
              "bucketName": "${RC_SRC}",
              "bucketPrefix": "${rc_path}",
              "releaseVersion": "${RC_VER}"
            }
          }
          EOF

          response=$(aws lambda invoke --function-name $lambda_function_name --region ${{ env.AWS_REGION }} --payload "$payload" response.txt 2>&1)
          if [[ "$response" == *"FunctionError"* ]]; then
            echo "[ERROR] Deployment of application component (DATABASE) with version ${RC_VER} failed with error:"
            echo "${response}"
            exit 1
          else
            response_payload=$(cat response.txt)
            echo "Response Payload: $response_payload"
            echo "[INFO] Application component (DATABASE) with version ${RC_VER} successfully deployed into ${RC_ENV^^}"
          fi

  backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
      github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}
    needs: validation
    outputs:
      stack-name: ${{ steps.get-stack.outputs.result }}

    steps:
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: setup sam
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-backend-app-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: retrieve backend
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
        run: |
          [[ $RC_VER =~ ^[0-9]+(\.[0-9]+){2}$ ]] && rc_path="releases/$RC_VER/backend" || rc_path="releases-dev/$RC_VER/backend"

          aws s3 cp s3://$RC_SRC/$rc_path/packaged.yml .
          aws s3 cp s3://$RC_SRC/$rc_path/samconfig.yml .
          echo "[INFO] Application component (BACKEND) with version ${RC_VER} successfully downloaded"
      
      - name: get stack name
        id: get-stack
        uses: mikefarah/yq@v4.42.1
        with:
          cmd: yq -r '."${{ env.RC_ENV }}".deploy.parameters.stack_name' samconfig.yml

      - name: deploy backend for ${{ env.RC_ENV }}
        run: |
          sam deploy \
            --template-file packaged.yml \
            --stack-name ${{ steps.get-stack.outputs.result }} \
            --config-env $RC_ENV \
            --region $AWS_REGION \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset
          echo "[INFO] Application component (BACKEND) with version ${RC_VER} successfully deployed into ${RC_ENV^^}"

  frontend:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
      github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}
    needs: backend

    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ASSUME_ROLE_NAME }}
          role-session-name: ${{ env.RC_ENV }}-frontend-app-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: retrieve frontend for ${{ env.RC_ENV }}
        env:
          RC_SRC: ${{ env.RC_SRC_PREFIX }}-${{ vars.AWS_ACCOUNT_ID }}
        run: |
          [[ $RC_VER =~ ^[0-9]+(\.[0-9]+){2}$ ]] && rc_path="releases/$RC_VER/frontend/$RC_ENV" || rc_path="releases-dev/$RC_VER/frontend/$RC_ENV"

          mkdir build/
          aws s3 cp s3://$RC_SRC/$rc_path/ build/ --recursive
          echo "[INFO] Application component (FRONTEND) with version ${RC_VER} successfully downloaded for ${RC_ENV^^}"

      - name: get frontend bucket name
        id: get-bucket
        run: |
          echo "frontend-bucket-name=$( \
            aws cloudformation describe-stacks \
              --stack-name ${{ needs.backend.outputs.stack-name }} \
              --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
              --output text \
          )" >> $GITHUB_OUTPUT
      
      - name: clear frontend for ${{ env.RC_ENV }}
        run: |
          aws s3 rm ${{ steps.get-bucket.outputs.frontend-bucket-name }} --recursive
          echo "[INFO] S3 Bucket for application component (FRONTEND) successfully cleared for ${RC_ENV^^}"

      - name: deploy frontend for ${{ env.RC_ENV }}
        run: |
          aws s3 cp build/ ${{ steps.get-bucket.outputs.frontend-bucket-name }} --recursive
          echo "[INFO] Application component (FRONTEND) with version ${RC_VER} successfully deployed for ${RC_ENV^^}"