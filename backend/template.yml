AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This SAM template deploys the following resources for a serverless application:
  - Lambda functions that provide the backend functionality of the application.
  - API Gateway that provides HTTP endpoints for the Lambda functions.
  - CloudFront distribution that serves as a content delivery network (CDN) to improve the 
    performance and security of the application.
  - S3 bucket that is used to host the static files (HTML, CSS, JavaScript, etc.) for the React SPA.
  
  The Lambda functions are triggered by API Gateway, and the SPA makes API calls to API Gateway to interact 
  with the backend. The SPA and its static assets are served to the end users through the CloudFront distribution.

Globals:
  Function:
    Architectures:
      - x86_64
    MemorySize: 256
    Runtime: python3.11
    Timeout: 60

Parameters:
  Environment:
    Description: The environment into which the stack is being deployed
    Type: String
  ProjectName:
    Description: The name of the project
    Type: String
  VpcId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>
    Default: ''
  VpcSubnets:
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Default: ''
  RdsDbHostAddr:
    Type: String
    Default: ''
  RdsSecurityGroupId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Default: ''
  WebProxySecurityGroupId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Default: ''

Conditions:
  IsNotLocal: !Not [!Equals [!Ref Environment, 'local']]
  IsNotProd: !Not [!Equals [!Ref Environment, 'prod']]

Resources:
  CsvHandlerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub  ${Environment}-${ProjectName}-csv-handler-api
      StageName: !Ref Environment
      EndpointConfiguration: 
        Type: REGIONAL
      TracingEnabled: true
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                StringEquals:
                  aws:UserAgent: 'Amazon CloudFront'

  CsvHandlerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub  ${Environment}-${ProjectName}-csv-handler-lambda
      Role: !GetAtt CsvHandlerLambdaExecutionRole.Arn
      CodeUri: src/csv_handler
      Handler: app.lambda_handler
      Timeout: 300
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /api/v1/{proxy+}
            Method: ANY
            RestApiId: !Ref CsvHandlerApi
        ApiDocs:
          Type: Api
          Properties:
            Path: /api/v1/docs
            Method: GET
            RestApiId: !Ref CsvHandlerApi
        ApiRedoc:
          Type: Api
          Properties:
            Path: /api/v1/redoc
            Method: GET
            RestApiId: !Ref CsvHandlerApi
        ApiOpenApiJson:
          Type: Api
          Properties:
            Path: /api/v1/openapi.json
            Method: GET
            RestApiId: !Ref CsvHandlerApi
      VpcConfig:
        SubnetIds: !Ref VpcSubnets
        SecurityGroupIds:
          - !GetAtt CsvHandlerLambdaSecurityGroup.GroupId
      Environment:
        Variables:
          PROJECT_ENV: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          HTTP_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          HTTPS_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          LOG_LEVEL: !If
            - IsNotProd
            - 'DEBUG'
            - 'INFO'
          POSTGRES_HOST:  !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/rds/endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: 5432
          POSTGRES_DB: !Sub '${ProjectName}_db'
          POSTGRES_CREDENTIALS: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/rds/user/app/name}}'
          CLAMAV_S3_BUCKET_NAME: !Sub 'shared-${ProjectName}-clamav-artefacts-${AWS::AccountId}'
          COGNITO_USERPOOL_ID: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/cognito/userpool/id}}'
          COGNITO_APP_CLIENT_ID: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/cognito/userpool/client/id}}'
          OTC_CLIENT_API_URL: !Sub 'https://${OtcClientApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/v1/otc/licences'
      LoggingConfig:
        LogGroup: !Ref CsvHandlerLambdaLogGroup

  CsvHandlerLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security group for ${Environment}-${ProjectName}-csv-handler-lambda function'
      GroupName: !Sub '${Environment}-${ProjectName}-csv-handler-lambda'
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref RdsSecurityGroupId
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
        - IpProtocol: udp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-csv-handler-lambda'

  RdsProxyFromCsvHandlerLambdaSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsNotLocal
    Properties:
      GroupId: !Ref RdsSecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt CsvHandlerLambdaSecurityGroup.GroupId

  CsvHandlerLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: IsNotLocal
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-${ProjectName}-csv-handler-lambda'
      KmsKeyId: !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/cloudwatch}}'
      RetentionInDays: 30

  CsvHandlerLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition: IsNotLocal
    Properties:
      RoleName: !Sub '${Environment}-${ProjectName}-csv-handler-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  CsvHandlerLambdaLoggingPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-csv-handler-lambda-logging-policy'
      Roles:
        - !Ref CsvHandlerLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt CsvHandlerLambdaLogGroup.Arn

  CsvHandlerLambdaSecretsAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-csv-handler-lambda-secrets-access-policy'
      Roles:
        - !Ref CsvHandlerLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/rds/user/app/arn}}'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/secretsmanager}}'

  OtcClientApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub  ${Environment}-${ProjectName}-otc-client-api
      StageName: !Ref Environment
      EndpointConfiguration: 
        Type: PRIVATE
      TracingEnabled: true
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
            - Effect: Deny
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                StringNotEquals:
                  aws:SourceVpc: !Ref VpcId

  OtcClientLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub  ${Environment}-${ProjectName}-otc-api-lambda
      Role: !GetAtt OtcClientLambdaExecutionRole.Arn
      CodeUri: src/otc_client
      Handler: app.lambda_handler
      Timeout: 180
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /api/v1/otc/licences
            Method: POST
            RestApiId: !Ref OtcClientApi
      VpcConfig:
        SubnetIds: !Ref VpcSubnets
        SecurityGroupIds:
          - !GetAtt OtcClientLambdaSecurityGroup.GroupId
      Environment:
        Variables:
          PROJECT_ENV: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          HTTP_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          HTTPS_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          LOG_LEVEL: !If
            - IsNotProd
            - 'DEBUG'
            - 'INFO'
          MS_LOGIN_URL: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/otc/ms/login/endpoint}}'
          MS_SCOPE: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/otc/ms/scope}}'
          MS_TENANT_ID: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/otc/ms/tenant/id}}'
          MS_CLIENT_ID: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/otc/ms/client/id}}'
          MS_CLIENT_SECRET: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/otc/ms/client/secret/name}}'
          OTC_API_URL: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/otc/api/endpoint}}'
          OTC_API_KEY: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/otc/apikey/name}}'
      LoggingConfig:
        LogGroup: !Ref OtcClientLambdaLogGroup

  OtcClientLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsNotLocal
    Properties:
      GroupDescription: !Sub 'Security group for ${Environment}-${ProjectName}-otc-client-lambda function'
      GroupName: !Sub '${Environment}-${ProjectName}-otc-client-lambda'
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
        - IpProtocol: udp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-otc-client-lambda'

  OtcClientLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: IsNotLocal
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-${ProjectName}-otc-client-lambda'
      KmsKeyId: !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/cloudwatch}}'
      RetentionInDays: 30

  OtcClientLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition: IsNotLocal
    Properties:
      RoleName: !Sub '${Environment}-${ProjectName}-otc-client-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  OtcClientLambdaLoggingPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-otc-client-lambda-logging-policy'
      Roles:
        - !Ref OtcClientLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt OtcClientLambdaLogGroup.Arn

  OtcClientLambdaSecretsAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-otc-client-lambda-secrets-access-policy'
      Roles:
        - !Ref OtcClientLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource: 
              - !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/otc/ms/client/secret/arn}}'
              - !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/otc/apikey/arn}}'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/secretsmanager}}'

  DataCatalogueLambda:
    Type: AWS::Serverless::Function
    Condition: IsNotLocal
    Properties:
      FunctionName: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda'
      Role: !GetAtt DataCatalogueLambdaExecutionRole.Arn
      CodeUri: src/data_catalogue
      Handler: app.lambda_handler
      Events:
        HourlyGetDataCatalogue:
          Type: Schedule
          Properties:
            Name:  !Sub '${Environment}-${ProjectName}-data-catalogue-lambda-schedule'
            Schedule: rate(1 day)
      VpcConfig:
        SubnetIds: !Ref VpcSubnets
        SecurityGroupIds:
          - !GetAtt DataCatalogueLambdaSecurityGroup.GroupId
      Environment:
        Variables:
          PROJECT_ENV: !Ref Environment
          PROJECT_NAME: !Ref ProjectName
          HTTP_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          HTTPS_PROXY: !Sub 'http://squid.${ProjectName}.${Environment}:3128'
          LOG_LEVEL: !If
            - IsNotProd
            - 'DEBUG'
            - 'INFO'
          POSTGRES_HOST:  !If
            - IsNotLocal
            - !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/rds/endpoint}}'
            - !Ref RdsDbHostAddr
          POSTGRES_PORT: 5432
          POSTGRES_DB: !Sub '${ProjectName}_db'
          POSTGRES_CREDENTIALS: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/rds/user/app/name}}'
      LoggingConfig:
        LogGroup: !Ref DataCatalogueLambdaLogGroup

  DataCatalogueLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsNotLocal
    Properties:
      GroupDescription: !Sub 'Security group for ${Environment}-${ProjectName}-data-catalogue-lambda function'
      GroupName: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda'
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref RdsSecurityGroupId
        - IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
        - IpProtocol: udp
          FromPort: 3128
          ToPort: 3128
          DestinationSecurityGroupId: !Ref WebProxySecurityGroupId
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda'

  RdsProxyFromDataCatalogueLambdaSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IsNotLocal
    Properties:
      GroupId: !Ref RdsSecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt DataCatalogueLambdaSecurityGroup.GroupId

  DataCatalogueLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: IsNotLocal
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Environment}-${ProjectName}-data-catalogue-lambda'
      KmsKeyId: !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/cloudwatch}}'
      RetentionInDays: 30

  DataCatalogueLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition: IsNotLocal
    Properties:
      RoleName: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  DataCatalogueLambdaLoggingPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda-logging-policy'
      Roles:
        - !Ref DataCatalogueLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt DataCatalogueLambdaLogGroup.Arn

  DataCatalogueLambdaSecretsAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: IsNotLocal
    Properties:
      PolicyName: !Sub '${Environment}-${ProjectName}-data-catalogue-lambda-secrets-access-policy'
      Roles:
        - !Ref DataCatalogueLambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/secretsmanager/rds/user/app/arn}}'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub '{{resolve:ssm:/shared/${ProjectName}/kms/secretsmanager}}'

  FrontendBucket:
    Type: AWS::S3::Bucket
    Condition: IsNotLocal
    Properties:
      BucketName: !Sub '${Environment}-${ProjectName}-deployment-frontend'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotLocal
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Action: 's3:GetObject'
            Resource: !Sub
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref FrontendBucket
            Condition:
              StringEquals:
                aws:SourceArn: !Sub
                  - 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}'
                  - Distribution: !Ref CloudFrontDistribution

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsNotLocal
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub '${Environment}-${ProjectName}-cdn'
        # Aliases:
        #   - !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/route53/hostedzone/name}}'
        # ViewerCertificate:
        #   AcmCertificateArn: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/acm/certificate/arn}}'
        #   MinimumProtocolVersion: TLSv1.2_2021
        #   SslSupportMethod: sni-only
        Origins:
          - Id: frontendBucket
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: backendApi
            DomainName: !Sub '${CsvHandlerApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: frontendBucket
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimised
        CacheBehaviors:
          - TargetOriginId: backendApi
            PathPattern: '/api/v1/docs'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: 
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          - TargetOriginId: backendApi
            PathPattern: '/api/v1/redoc'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: 
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          - TargetOriginId: backendApi
            PathPattern: '/api/v1/openapi.json'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: 
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          - TargetOriginId: backendApi
            PathPattern: '/api/v1/*'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: https-only
            AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachePolicyId: !Sub '{{resolve:ssm:/shared/${ProjectName}/cloudfront/cachepolicy/id}}' # Custom-CachingHeader-ApiGatewayRequireAuthorization
            OriginRequestPolicyId: !Sub '{{resolve:ssm:/shared/${ProjectName}/cloudfront/originrequestpolicy/id}}' # Custom-OriginRequest-ApiGatewayRequireAuthorization
        Logging:
          Bucket: !Sub 'shared-${ProjectName}-cdn-logging-${AWS::AccountId}.s3.amazonaws.com' 
          Prefix: !Ref Environment
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 10
            ResponseCode: 200
            ResponsePagePath: '/index.html'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${Environment}-${ProjectName}-cdn-oac
        Description: !Sub 'CloudFront access control used for access to ${Environment}-${ProjectName}-deployment-frontend S3 bucket'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFrontRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneId: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/route53/hostedzone/id}}'
  #     RecordSets: 
  #       - Name: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/route53/hostedzone/name}}'
  #         Type: A
  #         AliasTarget:
  #           DNSName: !GetAtt CloudFrontDistribution.DomainName
  #           HostedZoneId: Z2FDTNDATAQYW2
  #       - Name: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/route53/hostedzone/name}}'
  #         Type: AAAA
  #         AliasTarget:
  #           DNSName: !GetAtt CloudFrontDistribution.DomainName
  #           HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL for FastAPI'
    Value: !Sub 'https://${CsvHandlerApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionUrl:
    Description: 'CloudFront Distribution Domain Name URL'
    Value: !Sub
      - 'https://${CloudFrontDomainName}'
      - CloudFrontDomainName: !GetAtt CloudFrontDistribution.DomainName
      # - CloudFrontDomainName: !Sub '{{resolve:ssm:/${Environment}/${ProjectName}/route53/hostedzone/name}}'
  FrontendBucketName:
    Description: 'Name of Frontend S3 Bucket'
    Value: !Sub 's3://${FrontendBucket}'